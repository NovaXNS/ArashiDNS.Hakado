@page "/"
@using System.Diagnostics
@inject HttpClient Http
@inject NavigationManager navigation

<PageTitle>Latency Test | NovaXNS</PageTitle>


@if (string.IsNullOrWhiteSpace(new Uri(navigation.Uri).Query))
{
    <p><em>Token not found.</em></p>
}
else if (dohItems.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>URL</th>
                <th>Latency</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in dohItems)
            {
                <tr>
                    <td>@(item.Name?.ToUpper())</td>
                    <td>@("https://"+item.URL?.Trim()+"/"+new Uri(navigation.Uri).Query.Trim().TrimStart('?')+"/dns-query")</td>
                    @if (item.Time != null)
                    {
                        switch (item.Time.Average())
                        {
                            case >= 5000:
                                <td>Waiting</td>
                                break;
                            case > 2000:
                                <td style="color: FireBrick">Timeout</td>
                                break;
                            case > 1000:
                                <td style="color: Crimson">@item.Time ms</td>
                                break;
                            case > 500:
                                <td style="color: Tomato">@item.Time ms</td>
                                break;
                            case > 250:
                                <td style="color: orange">@item.Time ms</td>
                                break;
                            case > 150:
                                <td style="color: yellowgreen">@item.Time ms</td>
                                break;
                            case <= 150:
                                <td style="color: green">@item.Time ms</td>
                                break;
                            default:
                                <td >@item.Time</td>
                                break;
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DohItem> dohItems = new();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(new Uri(navigation.Uri).Query))
        {
            return;
        }

        var uid = new Uri(navigation.Uri).Query.Trim().TrimStart('?');
        var list = await Http.GetStringAsync($"https://dash.xns.one/api/{uid}/servers.csv");
        foreach (var item in list.Split(Environment.NewLine))
        {
            if (string.IsNullOrWhiteSpace(item)) continue;

            var i = item.Split(",");
            if (i.FirstOrDefault()!.ToLower().EndsWith("exp") || i.FirstOrDefault()!.ToLower().EndsWith("alpha"))
                continue;
            
            dohItems.Add(new DohItem {URL = i.LastOrDefault(), Name = i.FirstOrDefault(), Time = {5000}});
        }
        StateHasChanged();

        Parallel.ForEach(dohItems, async i =>
        {
            var httpRequestMessage = new HttpRequestMessage
            {
                RequestUri = new Uri("https://" + i.URL?.TrimEnd()),
                Method = HttpMethod.Get,
            };
            httpRequestMessage.SetBrowserRequestMode(BrowserRequestMode.NoCors);
            httpRequestMessage.SetBrowserRequestCache(BrowserRequestCache.NoCache);
            await new HttpClient() {Timeout = TimeSpan.FromMilliseconds(1000)}.SendAsync(httpRequestMessage);
        });

        for (var i = 0; i < 10; i++)
        {
            foreach (var item in dohItems)
            {
                if (item.URL == null || string.IsNullOrWhiteSpace(item.URL)) continue;
                var httpRequestMessage = new HttpRequestMessage
                {
                    RequestUri = new Uri("https://" + item.URL.TrimEnd()),
                    Method = HttpMethod.Get,
                };
                httpRequestMessage.SetBrowserRequestMode(BrowserRequestMode.NoCors);
                httpRequestMessage.SetBrowserRequestCache(BrowserRequestCache.NoCache);

                try
                {
                    try
                    {
                        var sp = Stopwatch.StartNew();
                        await new HttpClient() {Timeout = TimeSpan.FromMilliseconds(2500)}.SendAsync(httpRequestMessage);
                        sp.Stop();
                        item.Time?.Add((int)sp.ElapsedMilliseconds);
                    }
                    catch (Exception)
                    {
                        var sp = Stopwatch.StartNew();
                        await new HttpClient() {Timeout = TimeSpan.FromMilliseconds(4500)}.SendAsync(httpRequestMessage);
                        sp.Stop();
                        item.Time?.Add((int)sp.ElapsedMilliseconds);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    item.Time?.Add(4500);
                }

                dohItems = dohItems.OrderBy(a => a.Time).ToList();
                StateHasChanged();
            }
            Thread.Sleep(1000);
        }
    }

    public class DohItem
    {
        public string? URL { get; set; }

        public string? Name { get; set; }

        public List<int>? Time { get; set; }
    }
}
